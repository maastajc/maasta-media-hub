
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { getCacheBustingHeaders } from '@/utils/cacheManager';

const SUPABASE_URL = "https://jadphaypzbsxofowrjvy.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImphZHBoYXlwemJzeG9mb3dyanZ5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc5MTc4MjMsImV4cCI6MjA2MzQ5MzgyM30.YiP_KbzmfCn7lnE3lxrZ-FxKpHRFRAPQJMDgRvIlsN4";

// Create Supabase client with cache-busting configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  global: {
    headers: getCacheBustingHeaders()
  },
  db: {
    schema: 'public'
  },
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Add interceptor to add cache-busting headers to all requests
const originalFrom = supabase.from;
supabase.from = function(relation: string) {
  const query = originalFrom.call(this, relation);
  
  // Override the request to add cache-busting headers
  const originalThen = query.then;
  query.then = function(onfulfilled?: any, onrejected?: any) {
    // Add cache-busting timestamp to the request
    const timestamp = Date.now();
    const cacheBustingQuery = query.limit ? 
      query : 
      (query as any).limit(1000); // Ensure we have a query method
    
    return originalThen.call(this, onfulfilled, onrejected);
  };
  
  return query;
};
